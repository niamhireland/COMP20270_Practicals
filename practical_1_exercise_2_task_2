import random 

class Card(object):
    suit = ['Clubs', 'Diamonds', 'Hearts', 'Spades']
    value = ['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King']

    def __init__(self, suit_idx, value_idx):
        if suit_idx < 0 or suit_idx >= len(Card.suit):
            raise  ValueError(f'Invalid suit {Card.suit[suit_idx]}')
        if value_idx < 0 or value_idx >= len(Card.value):
            raise  ValueError(f'Invalid value {Card.value[value_idx]}')
        
        self.suit = Card.suit[suit_idx]
        self.value = Card.value[value_idx]

class Deck(object):
    def __init__(self):
        self.cards = [Card(suit_idx, value_idx - 1) for suit_idx in range(4) for value_idx in range(1, 14)]
        self.shuffle()

    def shuffle(self):
        random.shuffle(self.cards)

    def draw(self, num_cards=1):
        drawn_cards =   []
        for _ in range(num_cards):
            if len(self.cards) == 0:
                return drawn_cards
            drawn_cards.append(self.cards.pop(0))
        return drawn_cards
    
deck = Deck()

deck.shuffle()

num_to_draw = 10
drawn_cards = deck.draw(num_to_draw)
if not drawn_cards:
    print ('Deck is empty.')
for card in drawn_cards:
    print (f'Drawn: {card.value} of {card.suit}')
