import random

class Card(object):
    suit = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
    value = ['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King']

    def __init__(self, suit_idx, value_idx):
        if suit_idx < 0 or suit_idx >= len(Card.suit) or value_idx < 0 or value_idx >= len(Card.value):
            raise ValueError(f'Invalid suit or value index: {suit_idx}, {value_idx}.')
        
        self.suit = Card.suit[suit_idx]
        self.value = Card.value[value_idx]

    def __str__(self):
        return f'{self.value} of {self.suit}.'

class Deck(object):
    def __init__(self):
        self.cards = [Card(suit_idx, value_idx - 1) for suit_idx in range(4) for value_idx in range(1, 14)]

    def shuffle(self):
        random.shuffle(self.cards)

    def draw(self, num_cards=1):
        drawn_cards = []
        for _ in range(num_cards):
            if not self.cards:
                raise ValueError("Deck is empty. Cannot draw more cards.")
            drawn_cards.append(self.cards.pop())
        return drawn_cards

    def sort_by_value(self):
        self.cards.sort(key=lambda card: Card.value.index(card.value))

    def sort_by_suit(self):
        self.cards.sort(key=lambda card: (Card.suit.index(card.suit), Card.value.index(card.value)))

    def reset(self):
        self.cards = [Card(suit_idx, value_idx - 1) for suit_idx in range(4) for value_idx in range(1, 14)]

    def __str__(self):
        return '\n'.join(map(str, self.cards))

# Task
deck = Deck()
print("Initial deck:")
print(deck)

drawn_cards = deck.draw(2)
if not drawn_cards:
    print('Deck is empty, no cards to draw.')
else:
    print('Drawn cards:')
    for card in drawn_cards:
        print(f'{card}')

bigger_card = max(drawn_cards, key=lambda card: Card.value.index(card.value))
print(f'\nThe bigger card is: {bigger_card}')

deck.shuffle()
print('\nDeck after shuffling:')
print(deck)

deck.sort_by_value()
print('\nDeck after sorting by value:')
print(deck)

deck.sort_by_suit()
print('\nDeck after sorting by suit:')
print(deck)

deck.reset()
print('\nDeck after reset:')
print(deck)
