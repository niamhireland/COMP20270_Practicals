import random 

class Card(object):
    suit = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
    value = ['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King']

    def __init__(self, suit_idx, value_idx):
        """Initialize a Card object with the specified suit and value indices.
    Parameter suit_idx (int): Index for the card's suit (0-3).
    Parameter value_idx (int): Index for the card's value (0-12)."""
        if suit_idx < 0 or suit_idx >= len(Card.suit):
            raise ValueError(f'Invalid suit index: {suit_idx}.')
        if value_idx < 0 or value_idx >= len(Card.value):
            raise ValueError(f'Invalid value index: {value_idx}.')
        
        self.suit = Card.suit[suit_idx]
        self.value = Card.value[value_idx]

    def __str__(self):
        """"Return string representation of the card."""
        return (f'{self.value} of {self.suit}.')

    def reveal(self):
        """Return string revealing the card."""
        return f'{self.value} of {self.suit}'
    
class Deck(object):
    '''Initialise a deck of 52 cards.'''
    def __init__(self):
self.cards = [Card(suit_idx, value_idx - 1) for suit_idx in range(4) for value_idx in range(1, 14)]

    def shuffle(self):
        '''Random shuffle the cards in the deck.'''
        random.shuffle(self.cards)

    def draw (self, num_cards=1):
        ''''Draw and return the specified number of cards from the deck.'''
        drawn_cards = []
        for _ in range(num_cards):
            if len(self.cards) == 0:
                raise ValueError("Deck is empty. Cannot draw more cards.")
            else:
                drawn_cards.append(self.cards.pop())
        return drawn_cards
    
    def reveal(self):
        '''Return a string revealing all cards in the deck.'''
        return '\n'.join([str(card) for card in self.cards])
    
deck = Deck()

deck.shuffle()

num_to_draw = 5
drawn_cards = deck.draw(num_to_draw)
if not drawn_cards:
    print ('Deck is empty, no cards to reveal.')
else: 
    for card in drawn_cards:
        print (f'Drawn card: {card}.')

print ()

print ('Remaining cards in the deck.')
print (deck.reveal())
